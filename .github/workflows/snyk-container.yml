# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow which checks out the code, builds a container
# image using Docker and scans that image for vulnerabilities using
# Snyk. The results are then uploaded to GitHub Security Code Scanning
#
# For more examples, including how to limit scans to only high-severity
# issues, monitor images for newly disclosed vulnerabilities in Snyk and
# fail PR checks for new vulnerabilities, see https://github.com/snyk/actions/

name: Snyk Image Scan

on:
  workflow_run:
    workflows: ["Build and Push Docker Image to Docker Hub and GHCR using VERSION file"]
    types:
      - completed

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  snyk-image-scan:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read VERSION file
        id: version
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Set lowercase image name
        id: image
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME=$(basename "${REPO_LOWER}")
          echo "repo_lower=$REPO_LOWER" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Docker login (Docker Hub)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker login (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull GHCR image
        run: docker pull ghcr.io/${{ steps.image.outputs.repo_lower }}:${{ steps.version.outputs.version }}

      - name: Pull Docker Hub image
        run: docker pull oste/${{ steps.image.outputs.image_name }}:${{ steps.version.outputs.version }}

      - name: Install Snyk CLI
        run: |
          curl -Lo snyk https://static.snyk.io/cli/latest/snyk-linux
          chmod +x snyk
          sudo mv snyk /usr/local/bin/

      - name: Authenticate with Snyk
        run: snyk auth "${{ secrets.SNYK_TOKEN }}"

      - name: Scan GHCR image with Snyk
        run: |
          snyk container test ghcr.io/${{ steps.image.outputs.repo_lower }}:${{ steps.version.outputs.version }} \
            --file=Dockerfile \
            --sarif-file-output=snyk-ghcr.sarif \
            || true  # Allow job to continue even if vulnerabilities found

      - name: Scan Docker Hub image with Snyk
        run: |
          snyk container test oste/${{ steps.image.outputs.image_name }}:${{ steps.version.outputs.version }} \
            --file=Dockerfile \
            --sarif-file-output=snyk-dockerhub.sarif \
            || true

      - name: Upload SARIF (GHCR)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-ghcr.sarif
          category: snyk-ghcr

      - name: Upload SARIF (Docker Hub)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-dockerhub.sarif
          category: snyk-dockerhub









      # - name: Run Snyk to check Docker image for vulnerabilities
      #   continue-on-error: true
      #   uses: snyk/actions/docker@14818c4695ecc4045f33c9cee9e795a788711ca4
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     image: ghcr.io/${{ steps.image.outputs.name }}:${{ steps.get_version.outputs.version }}
      #     args: >
      #       --file=Dockerfile
      #       --sarif-file-output=snyk.sarif
      #       --exclude-base-image-vulns


# If in the future you want to scan multiple targets (e.g., Docker image + dependencies), you must:

# Run each Snyk scan separately

# Output to a separate SARIF file, e.g.:

# snyk-docker.sarif

# snyk-code.sarif

# Upload each with a separate upload-sarif step:

# - name: Upload Docker Scan Results
#   uses: github/codeql-action/upload-sarif@v3
#   with:
#     sarif_file: snyk-docker.sarif

# - name: Upload Code Scan Results
#   uses: github/codeql-action/upload-sarif@v3
#   with:
#     sarif_file: snyk-code.sarif